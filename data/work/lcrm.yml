slug: lcrm
title: Real Time Monitoring System
url: 'http://lcrm.com'
image: 'lcrm.jpg'
welcome_image: 'lcrm-welcome-bg.jpg'
background: dark
announce: Lead your business to better sales
description: |
  __LCRM__ is a high-load realtime system and CRM service that reveals your customers
  behaviour. Define filters and segments for visitors and communicate with clients and 
  newcomers to help them with finding necessary information and purchasing your products.
features:
  1: 120,000 requests per minute
  2: Scalable cloud-based solution
  3: Realtime monitoring
  4: Support chat widget
  5: Visitors events tracking
  6: CRM
  7: Data segments and filters
technologies:
  1: Ruby on Rails
  2: Erlang
  3: Sinatra
  4: Websockets
  5: Faye
  6: CoffeeScript
  7: Backbone
  8: Marionette
methodologies:
  1: Test-driven development
  2: Domain-driven development
  3: Scrum

story:
  part1:
    title: Relations matter
    image: 'work/lcrm/lcrm-ecommerce-en.svg'
    image_block_class: lcrm-ecommerce-block
  part2:
    content: |
      Everyone likes to get great customer service: orders processed fast, questions answered in time.
      When you run an ecommerce website (or any website you get customers from) it can be hard to organize everything right.
      Not to lose a client. To leave better impressions so he will come back and purchase again.
  part3:
    title: Build your tools
    content: |
      One of our clients is a big company who
      sells to sellers, providing equipment for retailers.
      They know how important is to manage customer relations and they put a lot of attention to it.
      So they decided to create a SaaS application to manage sales team tasks, track website visitors, answer their questions, offer help.
      When their CEO contacted us, he already had prototypes for this app. It was great to have some constraints and initial ideas
      of how things should work, but in development process a lot has changed.  
    image: work/lcrm/lcrm-visitors.png
  part4:
    content: |
      The work was split down into two parallel processes: one team was developing client-side widget, a script that was to be embedded
      into website which customers we needed to track; and a managers-side CRM, where website visitor behaviour was tracked.
      Later we added notifications and chat functionality to allow visitors and managers communicate.
    image: work/lcrm/lcrm-widget.png
  part5:
    content: |
      Remember yourself browsing an online shop: every second you waste on getting information reduces your desire to buy.
      The solution to fix delays and reduce customers refusal was to make visitors tracking and chat realtime.
      It was the toughest part at the moment. We split our backend into API and CRM apps.
      API was made to receive and process visitors online status, events, messages.
      CRM was getting data from API and sending managers actions and messages back.
      This system was built with Faye, Rack (Sinatra), Sidekiq, Postgresql and ElasticSearch.
      Later we rebuilt API with NodeJS to reduce server-side load and make the system scalable.  
    image: work/lcrm/lcrm-scheme.svg
    image_block_class: lcrm-scheme-block
  part6:
    content: |
      But managers who use CRM are people, too. They deserve an app where interactions are smooth and there and pages do not reload on every change.
      We picked up Backbone and Marionette and made the CRM more front-end and client-side application than before.
      It allowed us to implement segmentation to filter people and companies lists, receive chat notifications on every CRM page,
      update visitors stats in realtime.
  part7:
    title: It works
    content: |
      Sales team use LCRM to provide better customer service, improve their metrics and increase revenue.
      <br><br>
      Current code tests coverage is 90%, Code Climate GPA is 3.52.
      <br>
      The system works on three Hetzner servers with Nginx load balancer.


